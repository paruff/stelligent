require 'json'

cookbook 'apache2',         '= 1.3.0',  chef_api: :config
cookbook 'ark',             '= 0.0.15',  chef_api: :config
cookbook 'apt',             '= 1.10.0',  chef_api: :config
cookbook 'build-essential', '= 1.2.0',  chef_api: :config
cookbook 'chef_handler',    '= 1.1.4',  chef_api: :config
cookbook 'erlang',          '= 1.3.0',  chef_api: :config
cookbook 'couchdb',         '= 2.4.0',  chef_api: :config
cookbook 'database',        '= 1.3.6',  chef_api: :config
cookbook 'dmg',             '= 1.0.0',  chef_api: :config
cookbook 'git',             '= 1.0.0',  chef_api: :config
cookbook 'iptables',        '= 0.10.0', chef_api: :config
cookbook 'java',            '= 1.10.0',  chef_api: :config
cookbook 'selinux',         '= 0.5.2',  chef_api: :config
cookbook 'simple_iptables', '= 0.2.3',  chef_api: :config
cookbook 'tomcat',          '= 0.12.0', chef_api: :config
cookbook 'windows',         '= 1.8.2',  chef_api: :config
cookbook 'yum',             '= 1.0.0',  chef_api: :config
cookbook 'bluepill',        '= 2.2.2',  chef_api: :config
cookbook 'chef_package',    path: File.expand_path('../chef/cookbooks/chef_package', File.dirname(__FILE__))
cookbook 's3fs',            '= 1.1.0',  chef_api: :config
cookbook 'redis',           '= 2.1.1',  chef_api: :config
cookbook 'discovery',       '= 0.2.3',  chef_api: :config
cookbook 'openssl',         '= 1.1.0',  chef_api: :config
cookbook 'rsyslog',         '= 1.8.0',  chef_api: :config
cookbook 'stunnel',         '= 2.0.4',  chef_api: :config
cookbook 'xfs',             '= 1.1.0',  chef_api: :config

cookbook 'xml',             '= 1.2.0',  chef_api: :config
cookbook 'monit',           '= 0.7.1',  chef_api: :config
cookbook 'rabbitmq',        '= 2.3.0',  chef_api: :config
cookbook 'monitor',         '= 0.0.4',  chef_api: :config
cookbook 'redisio',         '= 1.7.0',  chef_api: :config
cookbook 'sensu',           '= 0.6.2',  chef_api: :config
cookbook 'kibana',          '= 0.1.7',  chef_api: :config
cookbook 'elasticsearch',   '= 0.3.5',  chef_api: :config
cookbook 'ulimit',          '= 0.3.2',  chef_api: :config
cookbook 'vigilo',          '= 0.1.2',  chef_api: :config

cookbook 'mysql',           '= 4.0.4',  chef_api: :config
cookbook 'yum-epel',        '= 0.2.0',  chef_api: :config
cookbook 'runit',           path: File.expand_path('../chef/cookbooks/runit', File.dirname(__FILE__))

cookbook 'yum_mirror',      '~> 0.9.12',   chef_api: :config
cookbook 'ec2',             '~> 1.0.0',   chef_api: :config
cookbook 'format',          '~> 1.0.0',   chef_api: :config
cookbook 'scap',            '~> 0.1.1',   chef_api: :config
cookbook 'sudo',            '~> 2.0.1',   chef_api: :config
cookbook 'aws',             '~> 0.100.1', chef_api: :config
cookbook 'get_git_source',  '~> 0.1.1',   chef_api: :config
cookbook 'gradle',          '~> 0.1.1',   chef_api: :config
cookbook 'groovy',          '~> 0.1.1',   chef_api: :config
cookbook 'java-osx',        '~> 0.1.1',   chef_api: :config
cookbook 'java-windows',    '~> 0.1.1',   chef_api: :config
cookbook 'vagrant',         '~> 0.1.1',   chef_api: :config
cookbook 'virtualbox',      '~> 0.7.1',   chef_api: :config
cookbook '7-zip',           '~> 1.0.1',   chef_api: :config
cookbook 'chef-solo-search','~> 0.4.1',   chef_api: :config
cookbook 'firewallrules',   '~> 0.1.1',   chef_api: :config
cookbook 'postgresql',      '= 2.1.0',  chef_api: :config
cookbook 'users',           '~> 1.1.1',   chef_api: :config
cookbook 'chef_commons',    '~> 1.1.1',   chef_api: :config

def add_source(name, constraint = nil, options = {})
  options[:constraint] = constraint
  new_source = nil
  
  begin
    new_source = CookbookSource.new(name, options)  
  rescue Exception => e
    puts %/
name: #{name}
constraint: #{constraint}
options: #{JSON.pretty_generate options}

error_message: #{e.message}
back_trace:
  #{e.backtrace.join("\n\t")}
    /
    raise "failed to add cookbook source"
  end
  
  if has_source?(name)
    # Only raise an exception if the source is a true duplicate
    groups = (options[:group].nil? || options[:group].empty?) ? [:default] : options[:group]
    if !(@sources[name].groups & groups).empty?
      puts "Berksfile contains multiple sources named '#{name}'"
      puts "Overriding:"
      puts "  #{@sources[name].inspect}"
      puts "With:"
      puts "  #{new_source.inspect}"
    end
  end

  @sources[name] = new_source
end

[@working_dir, ENV['OLDPWD']].each{|dir|
  vagrant_berksfile = File.expand_path('Berksfile', dir)
  if File.exists? File.expand_path('Vagrantfile', dir) and File.exists? vagrant_berksfile
    puts "loading vagrant berksfile"
    content = File.read(vagrant_berksfile)
    load content
    break
  else
    puts "could not find berksfile additions at (skipping): #{vagrant_berksfile}" 
  end
}

berksfile_overrides = File.expand_path('Berksoverrides', File.dirname(__FILE__))
puts "loading berkshelf overrides from: #{berksfile_overrides}" if File.exists?(berksfile_overrides)
puts "cound not find berkshelf overrides at (skipping): #{berksfile_overrides}" unless File.exists?(berksfile_overrides)
if File.exists?(berksfile_overrides)
  content = File.read(berksfile_overrides)
  load content
end












