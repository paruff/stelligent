require 'json'

cookbook 'apache2',         '= 1.3.0',  chef_api: :config
cookbook 'chef_package',    path: File.expand_path('../chef/cookbooks/chef_package', File.dirname(__FILE__))
cookbook 'runit',           path: File.expand_path('../chef/cookbooks/runit', File.dirname(__FILE__))

def add_source(name, constraint = nil, options = {})
  options[:constraint] = constraint
  new_source = nil
  
  begin
    new_source = CookbookSource.new(name, options)  
  rescue Exception => e
    puts %/
name: #{name}
constraint: #{constraint}
options: #{JSON.pretty_generate options}

error_message: #{e.message}
back_trace:
  #{e.backtrace.join("\n\t")}
    /
    raise "failed to add cookbook source"
  end
  
  if has_source?(name)
    # Only raise an exception if the source is a true duplicate
    groups = (options[:group].nil? || options[:group].empty?) ? [:default] : options[:group]
    if !(@sources[name].groups & groups).empty?
      puts "Berksfile contains multiple sources named '#{name}'"
      puts "Overriding:"
      puts "  #{@sources[name].inspect}"
      puts "With:"
      puts "  #{new_source.inspect}"
    end
  end

  @sources[name] = new_source
end

[@working_dir, ENV['OLDPWD']].each{|dir|
  vagrant_berksfile = File.expand_path('Berksfile', dir)
  if File.exists? File.expand_path('Vagrantfile', dir) and File.exists? vagrant_berksfile
    puts "loading vagrant berksfile"
    content = File.read(vagrant_berksfile)
    load content
    break
  else
    puts "could not find berksfile additions at (skipping): #{vagrant_berksfile}" 
  end
}

berksfile_overrides = File.expand_path('Berksoverrides', File.dirname(__FILE__))
puts "loading berkshelf overrides from: #{berksfile_overrides}" if File.exists?(berksfile_overrides)
puts "cound not find berkshelf overrides at (skipping): #{berksfile_overrides}" unless File.exists?(berksfile_overrides)
if File.exists?(berksfile_overrides)
  content = File.read(berksfile_overrides)
  load content
end












